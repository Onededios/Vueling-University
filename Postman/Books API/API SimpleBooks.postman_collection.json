{
	"info": {
		"_postman_id": "489f99b6-afce-4cfc-a225-2110e9dddb32",
		"name": "API SimpleBooks",
		"description": "StartFragment\n\n[https://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md](https://github.com/vdespa/introduction-to-postman-course/blob/main/simple-books-api.md)\n\nEndFragme",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27570576"
	},
	"item": [
		{
			"name": "Regression Test Cases",
			"item": [
				{
					"name": "TC01 - API Status",
					"item": [
						{
							"name": "TC01.0 - Get API Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Status OK received\", function() {\r",
											"    pm.expect(mainJson.status).to.eql('OK');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/status",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC02 - Get Books",
					"item": [
						{
							"name": "TC02.0 - Get All Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"pm.environment.set('allAvlBooks', mainJson.length);\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"All book fields are correct\", function() {\r",
											"    for (let i = 0; i < mainJson.length; i++) {\r",
											"        pm.expect(Object.keys(mainJson[i])).be.eql([\"id\", \"name\", \"type\", \"available\"]);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/books",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC02.1 - Get Single Book With No Correct Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 404\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Not Found'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Not Found');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Received error value\", function() {\r",
											"    pm.expect(mainJson.error).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('randomBookId', 12131231);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/books/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{randomBookId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC02.2 - Get Single Book With Correct Id And Available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Book fields are correct\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.be.eql([\"id\", \"name\", \"author\", \"type\", \"price\", \"current-stock\", \"available\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"Book is available\", function() {\r",
											"    pm.expect(mainJson.available).to.be.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Book has name\", function() {\r",
											"    pm.expect(mainJson.name).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Book has price\", function() {\r",
											"    pm.expect(mainJson.price.toString()).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/books/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC02.3 - Get Single Book With Correct Id And Not Available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Book fields are correct\", function() {pm.expect(Object.keys(mainJson)).to.be.eql([\"id\", \"name\", \"author\", \"type\", \"price\", \"current-stock\", \"available\"]);});\r",
											"\r",
											"pm.test(\"Book is not available\", function() {\r",
											"    pm.expect(mainJson.available).not.to.be.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Book has name\", function() {\r",
											"    pm.expect(mainJson.name).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Book has price\", function() {\r",
											"    pm.expect(mainJson.price.toString()).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/books/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC03 - Register",
					"item": [
						{
							"name": "TC03.0 - Register New User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('clientName', newRndName());\r",
											"pm.environment.set('clientEmail', newRndMail());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"pm.environment.set('token', mainJson.accessToken);\r",
											"\r",
											"pm.test(\"Response code 201\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Created'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Created');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received token is not empty\", function() {\r",
											"    pm.expect(mainJson.accessToken).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientName\": \"{{clientName}}\",\r\n    \"clientEmail\": \"{{clientEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/api-clients",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"api-clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC03.1 - Register New User With The Same Credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 409\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Conflict'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Conflict');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Book fields are correct\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.be.eql([\"error\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"Received error value\", function() {\r",
											"    pm.expect(mainJson.error).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientName\": \"{{clientName}}\",\r\n    \"clientEmail\": \"{{clientEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/api-clients",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"api-clients"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC04 - Make an order",
					"item": [
						{
							"name": "TC04.0 - Create Order With No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Receive 'Missing Authorization header.' in the Json\", function() {\r",
											"    pm.expect(mainJson.error).to.eql('Missing Authorization header.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('rndCustomerName', newRndName());\r",
											"pm.environment.set('rndOrderedBook', newRndBook());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bookId\": {{rndOrderedBook}},\r\n    \"customerName\": \"{{rndCustomerName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/orders",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC04.1 - Create Order With Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 201\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Created'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Created');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"The Json has been created\", function() {\r",
											"    pm.expect(mainJson.created).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The Json has orderID\", function() {\r",
											"    pm.expect(mainJson.orderId.toString()).not.to.be.empty;\r",
											"    pm.environment.set('lastOrderId',mainJson.orderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bookId\": {{rndOrderedBook}},\r\n    \"customerName\": \"{{rndCustomerName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/orders",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC04.2 - Get All Orders With No Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Receive 'Missing Authorization header.' in the Json\", function() {\r",
											"    pm.expect(mainJson.error).to.eql('Missing Authorization header.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC04.3 - Get All Orders With Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"let lastInIndex = mainJson.length-1;\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Order fields are correct\", function() {\r",
											"    pm.expect(Object.keys(mainJson[lastInIndex])).be.eql([\"id\", \"bookId\", \"customerName\", \"createdBy\", \"quantity\", \"timestamp\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"The last created order is added to Orders\", function() {\r",
											"    pm.expect(mainJson[lastInIndex].id).to.eql(pm.environment.get('lastOrderId'));\r",
											"});\r",
											"\r",
											"pm.test(\"Has the correct ordered book\", function() {\r",
											"    pm.expect(mainJson[lastInIndex].bookId).be.eql(pm.environment.get('rndOrderedBook'));\r",
											"});\r",
											"\r",
											"pm.test(\"Has the correct customerName assigned\", function() {\r",
											"    pm.expect(mainJson[lastInIndex].customerName).be.eql(pm.environment.get('rndCustomerName'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC05 - Get Orders",
					"item": [
						{
							"name": "TC05.0 - Get Single Order With No Correct Id & No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Received error value\", function() {\r",
											"    pm.expect(mainJson.error).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{randomOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC05.1 - Get Single Order With No Correct Id & Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 404\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Not Found'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Not Found');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Received error value\", function() {\r",
											"    pm.expect(mainJson.error).not.to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{randomOrderId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC06 - Modify an order",
					"item": [
						{
							"name": "TC06.0 - Update Value On Order With No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Receive 'Missing Authorization header.' in the Json\", function() {\r",
											"    pm.expect(mainJson.error).to.eql('Missing Authorization header.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('lastCustomerName', pm.environment.get('rndCustomerName'));\r",
											"pm.environment.set('rndCustomerName', newRndName());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerName\": \"{{rndCustomerName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC06.1 - Update Value On Order With Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code 204\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'No Content'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('No Content');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('updatedCustomerName', pm.environment.get('rndCustomerName'));\r",
											"pm.environment.set('rndCustomerName', newRndName());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerName\": \"{{rndCustomerName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC06.2 - Get Single Order With Correct Id & No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Receive 'Missing Authorization header.' in the Json\", function() {\r",
											"    pm.expect(mainJson.error).to.eql('Missing Authorization header.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{randomOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC06.3 - Get Single Order With Correct Id & Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Order fields are correct\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).be.eql([\"id\", \"bookId\", \"customerName\", \"createdBy\", \"quantity\", \"timestamp\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"customerName field has different value\", function() {\r",
											"    pm.expect(mainJson.customerName).not.to.eql(pm.environment.get('lastCustomerName'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC07 - Delete an order",
					"item": [
						{
							"name": "TC07.0 - Delete Single Order With No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Response code 401\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'Unauthorized'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('Unauthorized');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not empty JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Received 'error' field in the Json\", function() {\r",
											"    pm.expect(Object.keys(mainJson)).to.eql(['error']);\r",
											"});\r",
											"\r",
											"pm.test(\"Receive 'Missing Authorization header.' in the Json\", function() {\r",
											"    pm.expect(mainJson.error).to.eql('Missing Authorization header.');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC07.1 - Delete Single Order With Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code 204\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'No Content'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('No Content');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders/:id",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC07.2 - Get All Orders With Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let mainJson = JSON.parse(responseBody);\r",
											"let lastInIndex = mainJson.length-1;\r",
											"\r",
											"pm.test(\"Response code 200\", function() {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response text 'OK'\", function() {\r",
											"    pm.expect(pm.response.status).to.eql('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Receive not null JSON\", function() {\r",
											"    pm.expect(mainJson).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Order has been deleted from the Json\", function() {\r",
											"    pm.expect(mainJson.length).to.eql(0);\r",
											"});\r",
											"\r",
											"if (lastInIndex >= 1) {\r",
											"    pm.test(\"The last order don't last on the DB\", function() {\r",
											"        pm.expect(mainJson[lastInIndex].id).not.to.be.eql(pm.environment.get('lastOrderId'));\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mainURL}}/orders",
									"host": [
										"{{mainURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set('randomOrderId', 'aidkjwiodjawdpooajdw142142podka');",
							"pm.environment.set('randomBookId', '1241424121414');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"newRndName = function() {",
					"    const firstNames = [\"John\", \"Emma\", \"Michael\", \"Olivia\", \"James\", \"Sophia\", \"David\", \"Isabella\", \"Daniel\", \"Mia\"];",
					"    const lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\", \"Taylor\", \"Wilson\"];",
					"",
					"    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
					"    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
					"",
					"    return randomFirstName + \" \" + randomLastName;",
					"}",
					"",
					"newRndMail = function() {",
					"    const domains = [\"gmail.com\", \"yahoo.com\", \"hotmail.com\", \"outlook.com\", \"example.com\"];",
					"    const randomDomain = domains[Math.floor(Math.random() * domains.length)];",
					"    const randomUsername = Math.random().toString(36).substring(7); // Generate a random string for the username",
					"",
					"    return randomUsername + \"@\" + randomDomain;",
					"}",
					"",
					"newRndBook = function() {",
					"    let rndNum = 2;",
					"    let maxNum = pm.environment.get('allAvlBooks');",
					"    while (rndNum === 2) {",
					"        rndNum = Math.floor(Math.random() * 6) + 1;",
					"    }",
					"    console.log(rndNum);",
					"    return rndNum;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}